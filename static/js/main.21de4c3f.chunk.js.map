{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","base_url","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","onClick","MovieTrailer","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTopRated","fetchTrending","fetchNetflixOrginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","req","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21de4c3f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport MovieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchURL);\r\n      // console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchURL]);\r\n\r\n  // console.log(movies);\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const closeTrailer = () => {\r\n    setTrailerUrl(\"\");\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      MovieTrailer(movie?.name || movie?.original_name || movie?.title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\" key={title}>\r\n      {/* Title */}\r\n      <h2>{title}</h2>\r\n      {/*Poster Container */}\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            src={\r\n              isLargeRow\r\n                ? base_url + movie?.poster_path\r\n                : base_url + movie?.backdrop_path\r\n            }\r\n            alt={movie?.name}\r\n            className={isLargeRow ? \"poster\" : \"backdrop__poster\"}\r\n            onClick={() => handleClick(movie)}\r\n          ></img>\r\n        ))}\r\n      </div>\r\n      {/* When trailerUrl is available, play the youtube video */}\r\n      {trailerUrl && (\r\n        <div className=\"trailer__viewer\">\r\n          <img\r\n            className=\"close__button\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/7/72/VisualEditor_-_Icon_-_Close_-_white.svg\"\r\n            alt=\"Close Button\"\r\n            onClick={() => closeTrailer()}\r\n          />\r\n          <YouTube videoId={trailerUrl} opts={opts}></YouTube>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"d01620e985ed528ef6c325281c66cd9f\";\r\n\r\nconst requests = {\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOrginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./request\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const req = await axios.get(requests?.fetchTrending);\r\n      //   console.log(\"Banner Request\\n\");\r\n      //   console.log(req.data.results);\r\n      setMovie(\r\n        req.data.results[\r\n          Math.floor(Math.random() * req.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \" ... \" : str;\r\n  }\r\n\r\n  return (\r\n    // This banner will have a background image\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        //\r\n        backgroundImage: `url(\r\n            \"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/* title or name or original_name whichever is available will be used*/}\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        {/* two buttons */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        {/* description */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else {\r\n        setShow(false);\r\n      }\r\n    });\r\n\r\n    // This will prevent having multiple listeners\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    //  If show is true, then append nav__black class\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/255px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n        className=\"netflix__logo\"\r\n      />\r\n      <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"User Logo\"\r\n        className=\"user__logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Row from \"./Row\";\r\nimport requests from \"./request\";\r\nimport Banner from \"./Banner\";\r\nimport Nav from \"./Nav\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <Banner />\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchURL={requests.fetchNetflixOrginals}\r\n        isLargeRow={true}\r\n      />\r\n      <Row title=\"Trending NOW\" fetchURL={requests.fetchTrending} />\r\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romantic Movies\" fetchURL={requests.fetchRomanceMovies} />\r\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}